% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DataIntegration.R
\name{DataSource}
\alias{DataSource}
\title{DataSource}
\description{
Class representing a PetroVisor data source object.
}
\examples{
\dontrun{
DataSource$new()
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{The name of the data source.}

\item{\code{dataConnectionName}}{The name of the associated data connection.}

\item{\code{connectionType}}{The type of the data connection.}

\item{\code{cultureName}}{The name of the culture settings.}

\item{\code{settings}}{The settings of the data source.}

\item{\code{dataKind}}{The type of the dat in the data source.}

\item{\code{extraCategory}}{A string stating an extra category.}

\item{\code{isStackedEntities}}{This flag specifies whether the source data
contains entity information in a stacked column.}

\item{\code{isStackedSignals}}{This flag specifies whether the source data
contains signal information in a stacked column.}

\item{\code{isNewEntitiesTracked}}{This flag specifies whether new entities are
tracked in the log.}

\item{\code{createNewEntitiesTypeName}}{If new entities are added to the database
automatically, this field gives the name of the entity type with which
the new entities are created.}

\item{\code{createNewEntitiesRank}}{If new entities are added to the database
automatically, this field gices the ranke of the entity type with which
the new entities are created.}

\item{\code{isNewMappingsCreated}}{This flag specifies whether mappings for new
entities are added to the source automatically.}

\item{\code{addNewEntitiesToHierarchies}}{??}

\item{\code{importTagEntriesQuery}}{The query that is executed to add tag entries.}

\item{\code{entityAliasQuery}}{The query that is executed to retrieve aliases for
entities.}

\item{\code{stepColumn}}{The index of the column that specifies the timestamp.}

\item{\code{stackedEntitiesColumn}}{The index of the column that specifies
the entities.}

\item{\code{stackedSignalsColumn}}{The index of the column that specifies the
signals.}

\item{\code{dataMappings}}{A list stating the data mappings. Each item of the list
must be an instance of the class \code{DataMapping}.}

\item{\code{isLocked}}{This flag specifies whether the data source is locked.
Defaults to \code{FALSE}.}

\item{\code{user}}{The user the data source belongs to.}

\item{\code{isFavorite}}{This flag specifies whether the data source is marked
as favorite item, and thus shown in the favorites tab on the home module in
PetroVisor. Defaults to \code{FALSE}.}

\item{\code{labels}}{A list of strings holding the labels of the data source.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DataSource-new}{\code{DataSource$new()}}
\item \href{#method-DataSource-toList}{\code{DataSource$toList()}}
\item \href{#method-DataSource-clone}{\code{DataSource$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSource-new"></a>}}
\if{latex}{\out{\hypertarget{method-DataSource-new}{}}}
\subsection{Method \code{new()}}{
Create a new DataSource instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSource$new(
  name = NULL,
  dataConnectionName = NULL,
  connectionType = NULL,
  cultureName = NULL,
  settings = NULL,
  dataKind = NULL,
  extraCategory = NULL,
  isStackedEntities = NULL,
  isStackedSignals = NULL,
  isNewEntitiesTracked = NULL,
  createNewEntitiesTypeName = NULL,
  createNewEntitiesRank = NULL,
  isNewMappingsCreated = NULL,
  addNewEntitiesToHierarchies = NULL,
  importTagEntriesQuery = NULL,
  entityAliasQuery = NULL,
  stepColumn = NULL,
  stackedEntitiesColumn = NULL,
  stackedSignalsColumn = NULL,
  dataMappings = NULL,
  isLocked = FALSE,
  user = NULL,
  isFavorite = FALSE,
  labels = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name of the data source.}

\item{\code{dataConnectionName}}{The name of the associated data connection.}

\item{\code{connectionType}}{The type of the data connection.}

\item{\code{cultureName}}{The name of the culture settings.}

\item{\code{settings}}{The settings of the data source.}

\item{\code{dataKind}}{The type of the dat in the data source.}

\item{\code{extraCategory}}{A string stating an extra category.}

\item{\code{isStackedEntities}}{This flag specifies whether the source data
contains entity information in a stacked column.}

\item{\code{isStackedSignals}}{This flag specifies whether the source data
contains signal information in a stacked column.}

\item{\code{isNewEntitiesTracked}}{This flag specifies whether new entities are
tracked in the log.}

\item{\code{createNewEntitiesTypeName}}{If new entities are added to the
database automatically, this field gives the name of the entity type
with which the new entities are created.}

\item{\code{createNewEntitiesRank}}{If new entities are added to the database
automatically, this field gices the ranke of the entity type with which
the new entities are created.}

\item{\code{isNewMappingsCreated}}{This flag specifies whether mappings for new
entities are added to the source automatically.}

\item{\code{addNewEntitiesToHierarchies}}{??}

\item{\code{importTagEntriesQuery}}{The query that is executed to add tag
entries.}

\item{\code{entityAliasQuery}}{The query that is executed to retrieve aliases
for entities.}

\item{\code{stepColumn}}{The index of the column that specifies the timestamp.}

\item{\code{stackedEntitiesColumn}}{The index of the column that specifies
the entities.}

\item{\code{stackedSignalsColumn}}{The index of the column that specifies the
signals.}

\item{\code{dataMappings}}{A list stating the data mappings. Each item of the
list  must be an instance of the class \code{DataMapping}.}

\item{\code{isLocked}}{This flag specifies whether the data source is locked.
Defaults to \code{FALSE}.}

\item{\code{user}}{The user the data source belongs to.}

\item{\code{isFavorite}}{This flag specifies whether the data source is marked
as favorite item, and thus shown in the favorites tab on the home
module in PetroVisor. Defaults to \code{FALSE}.}

\item{\code{labels}}{A list of strings holding the labels of the data source.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSource-toList"></a>}}
\if{latex}{\out{\hypertarget{method-DataSource-toList}{}}}
\subsection{Method \code{toList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSource$toList()}\if{html}{\out{</div>}}
}

\subsection{Details}{
Convert the object to a list. This function is mainly used
by the RepositoryService to convert the objects to lists and then
call the web API.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSource-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DataSource-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSource$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
